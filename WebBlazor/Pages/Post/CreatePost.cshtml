@page "/CreatePost/"
@page "/CreatePost/{Id}"
@inject Blazor.FileReader.IFileReaderService fileReadService
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper
@inject HttpClient Http
@inject Components.ServiceOfAuthorize serviceOfAuthorize
@inject Components.ServiceOfImage serviceOfImage
@using WebBlazor.Models.ViewModels.Tag;
@using WebBlazor.Models.ViewModels.Post;
@using Markdig;

<div id="container-post">
    <h1 style="text-align: center;">@(post.Header)</h1>
    <h3>Section: <Tag tag="@section" /></h3>
    <br />
    <p class="post-content">
        <Markdown Content="@ContentValue" />
    </p>
    <br />
    <span>Tags:</span>
    <ListViewTemplateWithIf Items="@(post.Tags)">
        <ItemTemplate>
            <div style="display: inline-block; margin-top: 4px;" class="tag">@context.Name</div>
        </ItemTemplate>
    </ListViewTemplateWithIf>
</div>
<hr />
<h2 style="text-align: center; padding:20px;">Constructor</h2>
<div id="createPost-top">
    <div class="pure-form pure-form-stacked">
        <fieldset>
            <label for="header">Header</label>
            <input id="header" type="text" bind="@(post.Header)" />

            <label for="selection">Selection: </label>
            <select bind="@section">
                @if (Selections != null)
                {
                    foreach (var item in Selections)
                    {
                        <option>@item</option>
                    }
                }
            </select>
            <div>
                <label for="file" class="pure-button">Load image</label>
                <input type="file" id="file" ref="files" onchange="@LoadImage" style="display: none;" />
                <label for="content">Content</label>
                <textarea id="content" rows="10" bind="@ContentValue" />
            </div>
            <label for="tagInput">Tags:</label>
            <div id="grid-tag">
                <div style="display: inline-block;">
                    <ListViewTemplateWithIf Items="@(post.Tags)">
                        <ItemTemplate>
                            <div style="display: inline-block; margin-top: 4px;" class="tag" onclick="@(() => DeselectTag(context))">@(context.Name)</div>
                        </ItemTemplate>
                    </ListViewTemplateWithIf>
                </div>
                <input style="display: inline;" list="listTags" id="tagInput" type="text" bind="@bindStrForInput" onkeydown="@TagKeyPress" />
                <datalist id="listTags">
                    <ListViewTemplateWithIf Items="@(post.Tags)">
                        <ItemTemplate>
                            <option>@(context.Name)</option>
                        </ItemTemplate>
                    </ListViewTemplateWithIf>
                </datalist>
            </div>
            <br />
            <button onclick="@(() => UpdateCreate(true))" class="pure-button pure-button-primary">Send</button>
            <button onclick="@(() => UpdateCreate(false))" class="pure-button pure-button-primary">Update the draft</button>
        </fieldset>
    </div>
</div>

@functions{
    [Parameter] private string Id { get; set; }

    private string ContentValue { get; set; } = "# Content";
    private string section { get; set; }
    private string strTags { get; set; }
    private string bindStrForInput { get; set; }

    private IEnumerable<string> Selections { get; set; }
    private IEnumerable<TagViewModel> ServerTags { get; set; }

    private List<TagViewModel> TagsForSelect;
    private ElementRef files;

    private PostUpdateViewModel post = new PostUpdateViewModel()
    {
        Tags = new List<TagViewModel>(),
        Images = new List<string>()
    };

    protected override async Task OnInitAsync()
    {
        Selections = await serviceOfAuthorize.GetJsonAsync<List<string>>("api/Post/GetListOfSelections");
        section = Selections.First();
        ServerTags = await serviceOfAuthorize.GetJsonAsync<IEnumerable<TagViewModel>>("api/Post/GetListOfTags");
        TagsForSelect = ServerTags.OrderBy(a => -a.CountOfUsage).ToList();
    }
    protected async override Task OnParametersSetAsync()
    {
        int id;
        if (Id != null && Int32.TryParse(Id, out id))
        {
            post = await serviceOfAuthorize.GetJsonAsync<PostUpdateViewModel>($"api/Post/Edit?postId={id}");
        }
    }
    private async Task UpdateCreate(bool isFinished = false)
    {
        post.Content = Markdig.Markdown.ToHtml(markdown: ContentValue, pipeline: new MarkdownPipelineBuilder().UseAdvancedExtensions().Build());
        post.Tags = post.Tags;
        post.Section = section;
        post.BriefDesctiption = Markdig.Markdown.ToPlainText(markdown: ContentValue, pipeline: new MarkdownPipelineBuilder().UseAdvancedExtensions().Build());
        post.IsFinished = isFinished;
        if (isFinished)
        {
            post = await serviceOfAuthorize.SendJsonAsync<PostUpdateViewModel>(HttpMethod.Post, "api/Post/Create", post);
            UriHelper.NavigateTo($"/Post/{post.PostId}");
        }
        else
        {
            await serviceOfAuthorize.SendJsonAsync<object>(HttpMethod.Post, "api/Post/Update", post);
            UriHelper.NavigateTo($"/");
        }
    }
    private void SelectTag(TagViewModel tagViewModel)
    {
        post.Tags.Add(tagViewModel);
        TagsForSelect.Remove(tagViewModel);
    }
    private void DeselectTag(TagViewModel tagViewModel)
    {
        TagsForSelect.Add(tagViewModel);
        post.Tags.Remove(tagViewModel);
    }
    private void TagKeyPress(UIKeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Backspace")
        {
            strTags = new string(strTags.Take(strTags.Length - 1).ToArray());
        }
        else if (eventArgs.Key.Length > 1)
        {
            return;
        }
        else
        {
            strTags += eventArgs.Key;
        }
        var tag = TagsForSelect.Where(a => a.Name == strTags || a.Name == bindStrForInput).SingleOrDefault();
        if (tag != null)
        {
            SelectTag(tag);
            bindStrForInput = string.Empty;
            strTags = string.Empty;
        }
        else if (eventArgs.Key == " ")
        {
            SelectTag(new TagViewModel() { Name = strTags });
            bindStrForInput = string.Empty;
            strTags = string.Empty;
        }
    }
    private async Task LoadImage()
    {
        var path = await serviceOfImage.LoadPostImage(files, post.PostId);
        (post.Images as List<string>).Add(path);
        ContentValue += $"{Environment.NewLine}![comment to the image]({path})";
    }
}