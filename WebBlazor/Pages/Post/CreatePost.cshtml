@page "/CreatePost/"
@page "/CreatePost/{Id}"
@implements IDisposable
@inject Blazor.FileReader.IFileReaderService fileReadService
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper
@inject Services.ServiceOfImage serviceOfImage
@using Domain.Contracts.Models.ViewModels.Tag;
@using Domain.Contracts.Models.ViewModels.Post;
@using Domain.Contracts.Models;
@using Markdig;

@if (post == null)
{
    <Loading />
}
else
{
    <div class="container-post">
        <ValidationSummary Subject="@post" />
        <h1 style="text-align: center;">@(post.Header)</h1>
        <h3><LocalizationSentence Sentence="@("Section")" />: <Tag tag="@(post.Section)" /></h3>
        <br />
        <p class="post-content">
            <Markdown Content="@(post.Content)" />
        </p>
        <br />
        <span><LocalizationSentence Sentence="@("Tags")" />:</span>
        <ListViewTemplateWithIf Items="@(post.Tags)">
            <ItemTemplate>
                <div style="display: inline-block; margin-top: 4px;" class="tag">@context.Name</div>
            </ItemTemplate>
        </ListViewTemplateWithIf>
    </div>
    <hr />
    <div id="createPost-top" class="container-post">
        <h2 style="text-align: center; padding:20px;"><LocalizationSentence Sentence="@("Constructor")" /></h2>
        <div class="pure-form pure-form-stacked">
            <label for="header"><LocalizationSentence Sentence="@("Header")" /></label>
            <input id="header" type="text" bind="@(post.Header)" />
            <ValidationError Subject="@post" Property="@nameof(post.Header)" />

            <label for="selection"><LocalizationSentence Sentence="@("Section")" />: </label>
            <select bind="@(post.Section)">
                @if (Selections != null)
                {
                    foreach (var item in Selections)
                    {
                        <option>@item</option>
                    }
                }
            </select>
            <div>
                <label for="file" class="pure-button"><LocalizationSentence Sentence="@("Upload image")" /></label>
                <input type="file" id="file" ref="files" onchange="@LoadImage" style="display: none;" />
                <label for="content"><LocalizationSentence Sentence=@("Content") /></label>
                <div>
                    <textarea id="textareaContent"
                              rows="10"
                              bind="@(post.Content)"
                              dropzone="move"
                              ondrop="@(() => { highlightDropTargetStyle = null; })"
                              ondragenter="@(() => { highlightDropTargetStyle = "border:5px dashed salmon !important"; })" 
                              ondragleave="@(() => { highlightDropTargetStyle = null; })" 
                              style="@highlightDropTargetStyle" />
                </div>
                <ValidationError Subject="@post" Property="@nameof(post.Content)" />
            </div>
            <label for="tagInput"><LocalizationSentence Sentence="@("Tags")" />:</label>
            <div id="grid-tag">
                <div style="display: inline-block;">
                    <ListViewTemplateWithIf Items="@(post.Tags)">
                        <ItemTemplate>
                            <div style="display: inline-block; margin-top: 4px;" class="tag" onclick="@(() => DeselectTag(context))">@(context.Name)</div>
                        </ItemTemplate>
                    </ListViewTemplateWithIf>
                </div>
                <input style="display: inline;" id="inputForTags" list="listTags" type="text" onchange="@TagChange"/>
                <datalist id="listTags">
                    <ListViewTemplateWithIf Items="@ServerTags">
                        <ItemTemplate>
                            <option>@(context.Name)</option>
                        </ItemTemplate>
                    </ListViewTemplateWithIf>
                </datalist>
            </div>
            <br />
            <button onclick="@(() => UpdateCreate(false))" class="pure-button pure-button-primary">
                @if (IsEditPost)
                {
                    <LocalizationSentence Sentence="@("Update")" />
                }
                else
                {
                    <LocalizationSentence Sentence="@("Send as draft")" />
                }
            </button>
            <button onclick="@(() => UpdateCreate(true))" class="pure-button pure-button-primary"><LocalizationSentence Sentence="@("Send")" /></button>
        </div>
    </div>
}

@functions{
    [Parameter] private string Id { get; set; }
    private string highlightDropTargetStyle = null;
    private IEnumerable<string> Selections { get; set; }
    private List<TagViewModel> ServerTags { get; set; }
    private ElementRef files;
    private PostUpdateValidationViewModel post;
    private bool IsEditPost = false;
    private bool IsSend = false;
    private bool renderInitialization = true;

    protected override async Task OnAfterRenderAsync()
    {
        if(post != null && renderInitialization)
        {
            renderInitialization = false;
            WebBlazor.JsInteropClasses.DragAndDropJs.serviceOfImage = serviceOfImage;
            WebBlazor.JsInteropClasses.DragAndDropJs.sendEvent += (path) => { post.Content += $"{Environment.NewLine}![comment to the image]({path})"; this.StateHasChanged(); };
            await WebBlazor.JsInteropClasses.DragAndDropJs.IncludeJs(post.PostId);
        }
    }
    protected override async Task OnInitAsync()
    {
        Selections = (Selections == null) ? await serviceOfRequest.GetJsonAsync<List<string>>("api/Post/GetListOfSelections") : Selections;
        ServerTags = (ServerTags == null) ? await serviceOfRequest.GetJsonAsync<List<TagViewModel>>("api/Post/GetListOfTags") : ServerTags;
        ServerTags = ServerTags.OrderBy(a => -a.CountOfUsage).ToList();
    }
    protected async override Task OnParametersSetAsync()
    {
        int id;
        if (Id != null && Int32.TryParse(Id, out id))
        {
            var postRequest = new ReadRequestParams()
            {
                type = "PostUpdateViewModel",
                where = $"Id=={id}",
                count = 1
            };
            post = await serviceOfRequest.PostJsonAsync<PostUpdateValidationViewModel>($"/api/Post/Read", postRequest);
            post.Content = new ReverseMarkdown.Converter().Convert(post.Content);
            IsEditPost = true;
        }
        else
        {
            post = await serviceOfRequest.GetJsonAsync<PostUpdateValidationViewModel>($"api/Post/Create");
            this.Id = post.PostId.ToString();
        }
        post.Section = Selections.First();
    }
    private async Task UpdateCreate(bool isFinished = false, bool IsAutoUpdate = false)
    {
        if (!post.HasErrors)
        {
            var postUpdate = new PostUpdateViewModel()
            {
                BelongsToUser = post.BelongsToUser,
                BriefDesctiption = new string(Markdig.Markdown.ToPlainText(markdown: post.Content, pipeline: new MarkdownPipelineBuilder().UseAdvancedExtensions().Build()).Take(200).ToArray()),
                Content = Markdig.Markdown.ToHtml(markdown: post.Content, pipeline: new MarkdownPipelineBuilder().UseAdvancedExtensions().Build()),
                Header = post.Header,
                Images = post.Images,
                IsFinished = isFinished,
                PostId = post.PostId,
                Section = post.Section,
                Tags = post.Tags,
                UserProfileId = post.UserProfileId
            };
            await serviceOfRequest.PostJsonAsync<object>("api/Post/Update", postUpdate);
            IsSend = true;
            if(!IsAutoUpdate)
            {
                UriHelper.NavigateTo("/");
            }
        }
    }
    private void SelectTag(TagViewModel tagViewModel)
    {
        if(!post.Tags.Any(a => a.Name == tagViewModel.Name))
        {
            post.Tags.Add(tagViewModel);
            ServerTags.Remove(tagViewModel);
        }
    }
    private void DeselectTag(TagViewModel tagViewModel)
    {
        ServerTags.Add(tagViewModel);
        post.Tags.Remove(tagViewModel);
        this.StateHasChanged();
    }
    private void TagChange(UIChangeEventArgs e)
    {
        var text = (e.Value as string).Trim();
        if(text != "")
        {
            var tag = ServerTags.Where(a => a.Name == text).SingleOrDefault();
            if (tag != null)
            {
                SelectTag(tag);
            }
            else
            {
                SelectTag(new TagViewModel() { Name = text });
            }
            JSRuntime.Current.InvokeAsync<object>("Clear.InputContent", "inputForTags");
        }
    }
    private async Task LoadImage()
    {
        var path = await serviceOfImage.LoadPostImage(files, post.PostId);
        (post.Images as List<string>).Add(path);
        post.Content += $"{Environment.NewLine}![comment to the image]({path})";
    }
    public void Dispose()
    {
        if(!IsSend)
        {
            Console.WriteLine("auto save");
            IsEditPost = true;
            UpdateCreate(false, true);
        }
    }
}