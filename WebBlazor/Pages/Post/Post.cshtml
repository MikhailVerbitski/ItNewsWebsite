@page "/Post/{Id:int}"
@inject HttpClient Http
@using WebBlazor.Models.ViewModels.Post;
@using WebBlazor.Models.ViewModels.Comment;
@using Newtonsoft.Json;


@if (postViewModel == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div id="container-post">
        <h1 style="text-align: center;">@postViewModel.Header</h1>
        <h3>Section: <Tag tag="@postViewModel.Section" /></h3>
        <br />
        <p class="post-content">@postViewModel.Content</p>
        <br />
        <span>Tags:</span>
        <ListViewTemplate Items="@Tags">
            <ItemTemplate>
                <Tag tag="@context" />
            </ItemTemplate>
        </ListViewTemplate>
        <br />
        <br />
        <div class="grid-cols-two">
            <UserMini User="@postViewModel.AuthorUserMiniViewModel" />
            <div>
                <span>Rating</span>
                <ul class="rating clearfix">
                    <li class="current" style="width: @(postViewModel.Score * 20)%;" onclick="@Rating1"><span class="star1"></span></li>
                    <li><span class="star2" onclick="@Rating2"></span></li>
                    <li><span class="star3" onclick="@Rating3"></span></li>
                    <li><span class="star4" onclick="@Rating4"></span></li>
                    <li><span class="star5" onclick="@Rating5"></span></li>
                </ul>
            </div>
        </div>
        <br />
        <br />
        <div class="pure-form pure-form-stacked">
            <label for="Content">Comment</label>
            <textarea id="Content" class="pure-input-1" name="Content" bind="@CommentContent" />
            <button onclick="@SubmitCommentForm" id="SubmitComment" class="pure-button pure-button-primary">Send</button>
        </div>
    </div>
    <br />
    <hr/>
    <ListViewTemplate Items="comments">
        <ItemTemplate>
            <Comment comment="@context" />
        </ItemTemplate>
    </ListViewTemplate>
}


@functions{
    [Parameter] private int Id { get; set; }

    public string PathGetPostViewModel { get; set; } = $"https://localhost:44328/api/Post/PostViewModel";
    public string PathGetCreateComment { get; set; } = $"https://localhost:44328/api/Comment/CreateComment";
    public string PathGetComment { get; set; } = $"https://localhost:44328/api/Comment/GetComment";

    public PostViewModel postViewModel;
    public List<CommentViewModel> comments;
    public List<string> Tags;

    public string CommentContent { get; set; }

    protected override async Task OnInitAsync()
    {
        postViewModel = await Http.GetJsonAsync<PostViewModel>($"{PathGetPostViewModel}?postId={Id}");
        comments = postViewModel.Comments.ToList();
        Tags = postViewModel.Tags.ToList();
    }

    private async Task SubmitCommentForm()
    {
        var comment = new CommentViewModel()
        {
            PostId = postViewModel.PostId,
            Content = CommentContent
        };
        var newComment = await Http.SendJsonAsync<CommentViewModel>(HttpMethod.Post, "api/Comment/", comment);
        comments.Add(newComment);
        CommentContent = string.Empty;
        //comments = await Http.GetJsonAsync<IEnumerable<CommentViewModel>>($"{PathGetComment}/{postViewModel.PostId}");
    }
    private void Rating1() => Rating(1);
    private void Rating2() => Rating(2);
    private void Rating3() => Rating(3);
    private void Rating4() => Rating(4);
    private void Rating5() => Rating(5);
    private async void Rating(int score)
    {
        await Http.GetAsync($"https://localhost:44328/api/Post/PutEstimate?postId={postViewModel.PostId}&score={score}");
    }
}