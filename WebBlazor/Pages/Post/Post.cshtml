@page "/Post/{Id:int}"
@inject HttpClient Http
@using WebBlazor.Models.ViewModels.Post;
@using WebBlazor.Models.ViewModels.Comment;


@if (postViewModel == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div id="container-post">
        <h1 style="text-align: center;">@postViewModel.Header</h1>
        <h3>Section: <Tag tag="@postViewModel.Section" /></h3>
        <br />
        <p class="post-content">
            <Markdown Content="@postViewModel.Content" /> 
        </p>
        <br />
        <span>Tags:</span>
        <ListViewTemplate Items="@Tags">
            <ItemTemplate>
                <Tag tag="@context" />
            </ItemTemplate>
        </ListViewTemplate>
        <br />
        <br />
        <div class="grid-cols-two">
            <UserMini User="@postViewModel.AuthorUserMiniViewModel" />
            <div>
                <span>Rating</span>
                <StarsRating PercentOfRating="@(postViewModel.Score * 20)" PostId="@(postViewModel.PostId)" CanChange="@true"/>
            </div>
        </div>
        <br />
        <br />
        <div class="pure-form pure-form-stacked">
            <label for="Content">Comment</label>
            <textarea id="Content" class="pure-input-1" name="Content" bind="@CommentContent" />
            <button onclick="@SubmitCommentForm" id="SubmitComment" class="pure-button pure-button-primary">Send</button>
        </div>
    </div>
    <br />
    <hr/>
    <div onmousemove="@Update">
        <ListViewTemplate Items="comments">
            <ItemTemplate>
                <Comment comment="@context" post="@postViewModel"/>
            </ItemTemplate>
        </ListViewTemplate>
    </div>
}


@functions{
    [Parameter] private int Id { get; set; }

    public PostViewModel postViewModel;
    public List<CommentViewModel> comments;
    public List<string> Tags;
    public string CommentContent { get; set; }

    protected override async Task OnInitAsync()
    {
        postViewModel = await Http.GetJsonAsync<PostViewModel>($"/api/Post/PostViewModel?postId={Id}");
        comments = postViewModel.Comments.ToList();
        Tags = postViewModel.Tags.ToList();
    }

    private async Task SubmitCommentForm()
    {
        var comment = new CommentViewModel()
        {
            PostId = postViewModel.PostId,
            Content = CommentContent
        };
        var newComment = await Http.PostJsonAsync<CommentViewModel>("api/Comment/CreateComment", comment);
        comments.Add(newComment);
        CommentContent = string.Empty;
    }
    private void Update()
    {
        this.ShouldRender();
    }
}