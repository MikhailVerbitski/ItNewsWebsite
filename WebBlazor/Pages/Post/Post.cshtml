@page "/Post/{Id:int}"
@inject HttpClient Http
@using WebBlazor.Models.ViewModels.Post;
@using WebBlazor.Models.ViewModels.Comment;


@if (postViewModel == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div id="container-post">
        <h1 style="text-align: center;">@postViewModel.Header</h1>
        <h3>Section: <Tag tag="@postViewModel.Section" /></h3>
        <br />
        <p class="post-content">
            <Markdown Content="@postViewModel.Content" /> 
        </p>
        <br />
        <span>Tags:</span>
        <ListViewTemplate Items="@Tags">
            <ItemTemplate>
                <Tag tag="@context" />
            </ItemTemplate>
        </ListViewTemplate>
        <br />
        <br />
        <div class="grid-cols-two">
            <UserMini User="@postViewModel.AuthorUserMiniViewModel" />
            <div>

                @error

                <span>Rating</span>
                <ul class="rating clearfix">
                    <li class="current" style="width: @(PercentOfRating)%;" onclick="@(() => SetRating(1))"><span class="star1"></span></li>
                    <li><span class="star2" onclick="@(() => SetRating(2))"></span></li>
                    <li><span class="star3" onclick="@(() => SetRating(3))"></span></li>
                    <li><span class="star4" onclick="@(() => SetRating(4))"></span></li>
                    <li><span class="star5" onclick="@(() => SetRating(5))"></span></li>
                </ul>
            </div>
        </div>
        <br />
        <br />
        <div class="pure-form pure-form-stacked">
            <label for="Content">Comment</label>
            <textarea id="Content" class="pure-input-1" name="Content" bind="@CommentContent" />
            <button onclick="@SubmitCommentForm" id="SubmitComment" class="pure-button pure-button-primary">Send</button>
        </div>
    </div>
    <br />
    <hr/>
    <ListViewTemplate Items="comments">
        <ItemTemplate>
            <Comment comment="@context"/>
        </ItemTemplate>
    </ListViewTemplate>
}


@functions{
    [Parameter] private int Id { get; set; }

    public string PathPostController { get; set; } = "https://localhost:44328/api/Post";

    public PostViewModel postViewModel;
    public List<CommentViewModel> comments;
    public List<string> Tags;
    public double PercentOfRating { get; set; }
    public string CommentContent { get; set; }

    string error;

    protected override async Task OnInitAsync()
    {
        postViewModel = await Http.GetJsonAsync<PostViewModel>($"{PathPostController}/PostViewModel?postId={Id}");
        comments = postViewModel.Comments.ToList();
        Tags = postViewModel.Tags.ToList();
        PercentOfRating = postViewModel.Score * 20;
    }

    private async Task SubmitCommentForm()
    {
        var comment = new CommentViewModel()
        {
            PostId = postViewModel.PostId,
            Content = CommentContent
        };
        var newComment = await Http.SendJsonAsync<CommentViewModel>(HttpMethod.Post, "api/Comment/", comment);
        comments.Add(newComment);
        CommentContent = string.Empty;
    }
    private void SetRating(int score)
    {
        PercentOfRating = 20 * Http.GetJsonAsync<double>($"{PathPostController}/PutEstimate?postId={postViewModel.PostId}&score={score}").Result;
    }
}