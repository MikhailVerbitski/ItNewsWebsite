@page "/Post/{Id:int}"
@implements IDisposable
@using Domain.Contracts.Models.ViewModels.Post;
@using Domain.Contracts.Models.ViewModels.Comment;
@using Blazor.Extensions;

@if (postViewModel == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div id="container-post">
        <h1 style="text-align: center;">@postViewModel.Header</h1>
        <h3><LocalizationSentence Sentence="@("Section")" />: <Tag tag="@postViewModel.Section" /></h3>
        <br />
        <p class="post-content">
            <Markdown Content="@postViewModel.Content" />
        </p>
        <br />
        <span><LocalizationSentence Sentence="@("Tags")" />:</span>
        <ListViewTemplate Items="@Tags">
            <ItemTemplate>
                <Tag tag="@context" />
            </ItemTemplate>
        </ListViewTemplate>
        <br />
        <br />
        <div class="grid-cols-two">
            <UserMini User="@postViewModel.AuthorUserMiniViewModel" />
            <div>
                <span><LocalizationSentence Sentence="@("Rating")" /></span>
                <StarsRating PercentOfRating="@(postViewModel.Score * 20)" PostId="@(postViewModel.PostId)" CanChange="@(serviceOfAuthorize.DataAboutUser != null && !postViewModel.BelongsToUser)" />
            </div>
        </div>
        <br />
        <br />
        @if (serviceOfAuthorize.IsAuthorize && serviceOfAuthorize.DataAboutUser.Priority >= 1)
        {
            <div class="pure-form pure-form-stacked">
                <label for="Content"><LocalizationSentence Sentence="@("Comment")" /></label>
                <textarea id="Content" class="pure-input-1" name="Content" bind="@CommentContent" />
                <button onclick="@SendMessage" id="SubmitComment" class="pure-button pure-button-primary">Send</button>
            </div>
        }
    </div>
    <br />
    <hr />
    <div onmousemove="@Update">
        <ListViewTemplate Items="@(postViewModel.Comments as List<CommentViewModel>)">
            <ItemTemplate>
                <Comment comment="@context" post="@postViewModel" delete="@(comment => DeleteComment(comment))" />
            </ItemTemplate>
        </ListViewTemplate>
    </div>
}

<Locale key="qwe"></Locale>

@functions{
    [Parameter] private int Id { get; set; }
    private string CurrentUserId { get; set; }
    private PostViewModel postViewModel;
    private List<string> Tags;
    private string CommentContent { get; set; }
    private HubConnection connection;

    protected async override Task OnInitAsync()
    {
        connection = new HubConnectionBuilder().WithUrl("http://localhost:53247/commentHub").Build();
        connection.On<CommentViewModel>("createComment", this.OnCreateComment);
        connection.On<int>("deleteComment", this.OnDeleteComment);
        await connection.StartAsync();
    }

    Task OnCreateComment(CommentViewModel comment)
    {
        (postViewModel.Comments as List<CommentViewModel>).Add(comment);
        StateHasChanged();
        return Task.CompletedTask;
    }
    async Task SendMessage()
    {
        if(CommentContent != "")
        {
            var comment = new CommentCreateEditViewModel()
            {
                PostId = postViewModel.PostId,
                Content = CommentContent
            };
            CommentContent = string.Empty;
            var newComment = await serviceOfAuthorize.PostJsonAsync<CommentViewModel>("api/Comment/Create", comment);
            await connection.InvokeAsync("Send", newComment);
        }
    }
    Task OnDeleteComment(int commentId)
    {
        (postViewModel.Comments as List<CommentViewModel>).Remove((postViewModel.Comments as List<CommentViewModel>).FirstOrDefault(a => a.CommentId == commentId));
        this.StateHasChanged();
        return Task.CompletedTask;
    }
    async Task DeleteComment(CommentViewModel comment)
    {
        await serviceOfAuthorize.GetAsync($"/api/Comment/Delete?commentId={comment.CommentId}");
        await connection.InvokeAsync("Delete", comment.CommentId);
    }


    protected async override Task OnParametersSetAsync()
    {
        postViewModel = await serviceOfAuthorize.PostJsonAsync<PostViewModel>($"/api/Post/Read", new
        {
            type = "PostViewModel",
            count = 1,
            where = $"Id=={Id}"
        });
        postViewModel.Comments = postViewModel.Comments.ToList();
        Tags = postViewModel.Tags.Select(a => a.Name).ToList();
    }
    private void Update()
    {
        this.ShouldRender();
    }
    public void Dispose()
    {
        connection.StopAsync();
    }
}