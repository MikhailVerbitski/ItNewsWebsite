@page "/Post/{Id:int}"
@implements IDisposable
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper
@using Domain.Contracts.Models.ViewModels.Post;
@using Domain.Contracts.Models.ViewModels.Comment;
@using Blazor.Extensions;

@if (post == null)
{
    <Loading />
}
else
{
    <div class="container-post" class="content-body">
        <h1 style="text-align: center;">@post.Header</h1>
        <h3><LocalizationSentence Sentence="@("Section")" />: <Tag tag="@post.Section" /></h3>
        <br />
        <p class="post-content">
            <Markdown Content="@post.Content" />
        </p>
        <br />
        <span><LocalizationSentence Sentence="@("Tags")" />:</span>
        <ListViewTemplate Items="@Tags">
            <ItemTemplate>
                <Tag tag="@context" />
            </ItemTemplate>
        </ListViewTemplate>
        <br />
        <br />
        <div class="grid-cols-two">
            <UserMini User="@post.AuthorUserMiniViewModel" />
            <div>
                <span><LocalizationSentence Sentence="@("Rating")" /></span>
                <StarsRating PercentOfRating="@(post.Score * 20)" PostId="@(post.PostId)" CanChange="@(serviceOfAuthorize.DataAboutUser != null && !post.BelongsToUser)" />
            </div>
        </div>
        <br />
        <div class="grid-post-edit-delete">
            <div></div>
            <div><LocalizationTime Time="@post.Created" format="@("dddd, dd MMMM yyyy, HH:mm")"/></div>
        </div>
        <div class="grid-post-edit-delete">
            @if ((post.BelongsToUser && (serviceOfAuthorize.DataAboutUser != null && serviceOfAuthorize.DataAboutUser.Priority > 1)) || serviceOfAuthorize.DataAboutUser != null && serviceOfAuthorize.DataAboutUser.Priority >= 3)
            {
                <div class="post-edit-delete">
                    <font size="2"><a href="/CreatePost/@post.PostId"><LocalizationSentence Sentence="@("Edit")" /></a></font>
                    <font size="2"><a onclick="@Delete"><LocalizationSentence Sentence="@("Delete")" /></a></font>
                </div>
            }
        </div>
        <hr />
        <br />
        <h3><LocalizationSentence Sentence="@("Comments")" /></h3>
        @if (serviceOfAuthorize.IsAuthorize && serviceOfAuthorize.DataAboutUser.Priority >= 1)
        {
            <div class="pure-form pure-form-stacked">
                <textarea id="Content" class="pure-input-1" name="Content" bind="@CommentContent" />
                <button onclick="@SendMessage" id="SubmitComment" class="pure-button pure-button-primary">Send</button>
            </div>
        }
        <br />
        <ListOfComments CommentType="@typeof(CommentViewModel)" post="@post" />
    </div>
}

@functions{
    [Parameter] private int Id { get; set; }
    private string CurrentUserId { get; set; }
    private PostViewModel post;
    private List<string> Tags;
    private string CommentContent { get; set; }
    private HubConnection connection;

    protected async override Task OnInitAsync()
    {
        connection = new HubConnectionBuilder().WithUrl($"{serviceOfAuthorize.Http.BaseAddress}/commentHub").Build();
        await connection.StartAsync();
    }
    async Task SendMessage()
    {
        if (CommentContent != "")
        {
            var comment = new CommentCreateEditViewModel()
            {
                PostId = post.PostId,
                Content = CommentContent
            };
            CommentContent = string.Empty;
            var newComment = await serviceOfRequest.PostJsonAsync<CommentViewModel>("api/Comment/Create", comment);
            await connection.InvokeAsync("Send", newComment);
        }
    }
    async Task DeleteComment(CommentViewModel comment)
    {
        await serviceOfRequest.GetAsync($"/api/Comment/Delete?commentId={comment.CommentId}");
        await connection.InvokeAsync("Delete", comment.CommentId);
    }
    protected async override Task OnParametersSetAsync()
    {
        post = await serviceOfRequest.PostJsonAsync<PostViewModel>($"/api/Post/Read", new
        {
            type = "PostViewModel",
            count = 1,
            where = $"Id=={Id}"
        });
        post.Comments = (post.Comments == null) ? new List<CommentViewModel>() : post.Comments.ToList();
        Tags = post.Tags.Select(a => a.Name).ToList();
    }
    private async Task Delete()
    {
        await serviceOfRequest.GetAsync($"api/Post/Delete?postId={post.PostId}");
        UriHelper.NavigateTo("/");
    }
    public void Dispose()
    {
        connection.StopAsync();
    }
}