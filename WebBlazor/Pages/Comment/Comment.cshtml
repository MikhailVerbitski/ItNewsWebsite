@page "/Comment"
@inject HttpClient Http
@inject Components.ServiceOfAuthorize serviceOfAuthorize
@using WebBlazor.Models.ViewModels.Comment;
@using WebBlazor.Models.ViewModels.Post;
@using WebBlazor.Models.ViewModels.User;
@using WebBlazor.Models;

<div class="comment">
    <div class="grid-post">
        <UserMini User="@comment.AuthorUserMiniViewModel" />
    </div>
    <div style="padding: 0 0 0 50px;">
        <div class="comment-content">
            <div>
                <p style="word-wrap: break-word;">@comment.Content</p>
            </div>
        </div>
        <div class="grid-comment-footer">
            <p class="container-date">@DateConverter.GetTime(comment.Created)</p>
            <div></div>
            @if (comment.IsUserLiked)
            {
                <button onclick="@Dislike" class="pure-button"><font color="#FF3347">♥ @comment.CountOfLikes</font></button>
            }
            else
            {
                <button onclick="@Like" class="pure-button">♥ @comment.CountOfLikes</button>
            }
        </div>
    </div>
    <br />
</div>
<hr />

@functions{
    [Parameter] CommentViewModel comment { get; set; }
    [Parameter] PostViewModel post { get; set; }

    protected override void OnInit()
    {
        var field = typeof(TimeZoneInfo).GetField("local", System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.NonPublic);
        field.SetValue(null, TimeZoneInfo.CreateCustomTimeZone("FAKE", TimeSpan.FromHours(3), "FAKE", "FAKE"));
        base.OnInit();
    }

    public async Task Dislike()
    {
        if(await serviceOfAuthorize.TryToAuthorize())
        {
            await Http.GetAsync($"api/Comment/DislikeComment?commentId={comment.CommentId}&postId={comment.PostId}");
            comment.IsUserLiked = !comment.IsUserLiked;
            comment.CountOfLikes--;

            UserRatingChange(-1);
        }
    }
    public async Task Like()
    {
        if (await serviceOfAuthorize.TryToAuthorize())
        {
            await Http.GetAsync($"api/Comment/LikeComment?commentId={comment.CommentId}&postId={comment.PostId}");
            comment.IsUserLiked = !comment.IsUserLiked;
            comment.CountOfLikes++;

            UserRatingChange(1);
        }
    }
    private void UserRatingChange(int plus)
    {
        var users = new UserMiniViewModel[] { post.AuthorUserMiniViewModel }
            .Concat(post.Comments
            .Select(a => a.AuthorUserMiniViewModel))
            .Where(a => a.ApplicationUserId == comment.AuthorUserMiniViewModel.ApplicationUserId);
        foreach (var item in users)
        {
            item.CountOfLikes += plus;
        }
    }
}