@page "/Search/"
@page "/Search/{property}"
@layout ContentLayout
@using Domain.Contracts.Models.ViewModels.User
@using Domain.Contracts.Models.ViewModels.Post
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper

<div id="container-posts">
    <h2><LocalizationSentence Sentence="@message" /></h2>
    <span>
        <font size="3"><LocalizationSentence Sentence="@("Type")" />: </font>
        <a><font size="2" color="@((typeOfData) ? "red" : "")" onclick="@(() => LoadData(true))"><LocalizationSentence Sentence="@("Posts")" /></font></a>
        <a><font size="2" color="@((!typeOfData) ? "red" : "")" onclick="@(() => LoadData(false))"><LocalizationSentence Sentence="@("Users")" /></font></a>
    </span>
    @if (typeOfData)
    {
        if (Posts != null)
        {
            <ListOfPosts PostType="@(typeof(PostCompactViewModel))" listOfPosts="@Posts" />
        }
    }
    else
    {
        if (Users != null)
        {
            <ListViewTemplate Items="@Users">
                <ItemTemplate>
                    <div class="grid-userMini-search">
                        <img src="@context.Avatar" class="userMiniImg" asp-append-version="true" height="100" width="100" />
                        <div>
                            <p><a href="/UserPage/@(context.UserProfileId)"><font size="3">(<font color="@context.Role.Color">@context.Role.Name</font>) @context.FirstName @context.LastName</font></a></p>
                            <p><LocalizationSentence Sentence="@("Rating")" /> - @context.CountOfLikes</p>
                        </div>
                    </div>
                    <br />
                    <hr />
                    <br />
                    <br />
                </ItemTemplate>
            </ListViewTemplate>
        }
    }
</div>

@functions{
    [Parameter] private string property { get; set; } = "";
    private List<UserMiniViewModel> Users { get; set; }
    private List<PostCompactViewModel> Posts { get; set; }
    private string message { get; set; }
    private bool typeOfData;

    protected override void OnInit()
    {
        if (property == "")
        {
            message = "nothing found :(";
        }
    }
    protected async override Task OnParametersSetAsync()
    {
        if (property != "")
        {
            message = "";
            await LoadData(true);
            if (property == "" && Users.Count == 0 && Posts.Count == 0)
            {
                message = "nothing found :(";
            }
        }
    }
    private async Task LoadData(bool key)
    {
        typeOfData = key;
        if(typeOfData)
        {
            Posts = await serviceOfAuthorize.GetJsonAsync<List<PostCompactViewModel>>($"/api/Post/Search?property={property}");
        }
        else
        {
            Users = await serviceOfAuthorize.GetJsonAsync<List<UserMiniViewModel>>($"/api/User/Search?property={property}");
        }
    }
}