@page "/UserPage/{login}"
@using WebBlazor.Models.ViewModels.User
@using WebBlazor.Models.ViewModels.Post
@inject Components.ServiceOfAuthorize serviceOfAuthorize
@inject Components.ServiceOfImage serviceOfImage

@if (User == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div id="grid-user-profile" class="content-head content content-radius">
        <div>
            <div class="grid-cols-two">
                <p><a href="/UserPage/@(User.Login)"><h1>@User.FirstName @User.LastName</h1></a></p>
                <img src="@((User.Avatar == null) ? "/img/default-user-profile-image.png" : User.Avatar)" asp-append-version="true" height="100" width="100" />
            </div>
            @if (User.IsCurrentUser)
            {
                <br />
                <label for="file" class="pure-button">Change image</label>
                <input type="file" id="file" ref="files" onchange="@LoadImage" style="display: none;" />
                <br />
                <br />
            }
            <div id="grid-user-profile-userData">
                <font size="5">First name:</font>
                <font style="display: @((!ChangeKeys[0]) ? "" : "none")" size="5">@User.FirstName</font>
                <input style="display: @((ChangeKeys[0]) ? "" : "none")" bind="@User.FirstName" />
                @if (User.IsCurrentUser)
                {
                    <button onclick="@(() => ChangeProperty(0))">change</button>
                }
                else
                {
                    <div></div>
                }

                <font size="5">Last name:</font>
                <font style="display: @((!ChangeKeys[1]) ? "" : "none")" size="5">@User.LastName</font>
                <input style="display: @((ChangeKeys[1]) ? "" : "none")" bind="@User.LastName" />
                @if (User.IsCurrentUser)
                {
                    <button onclick="@(() => ChangeProperty(1))">change</button>
                }
                else
                {
                    <div></div>
                }

                <font size="5" color="@User.Role.Color">Role:</font>
                <font size="5" color="@User.Role.Color">@User.Role.Name</font>
                @if (User.IsCurrentUser)
                {
                    <button onclick="@(() => ChangeProperty(2))">change</button>
                }
                else
                {
                    <div></div>
                }

                <font size="5">Count of likes:</font>
                <font size="5">@User.CountOfLikes</font>
                <div></div>

                <font size="5">Login:</font>
                <font style="display: @((!ChangeKeys[3]) ? "" : "none")" size="5">@User.Login</font>
                <input style="display: @((ChangeKeys[3]) ? "" : "none")" bind="@User.Login" />
                @if (User.IsCurrentUser)
                {
                    <button onclick="@(() => ChangeProperty(3))">change</button>
                }
                else
                {
                    <div></div>
                }


                @if (User.IsCurrentUser)
                {
                    <font size="5">New password:</font>
                    <input bind="@User.Password" />
                    <button onclick="@(() => ChangeProperty(null))">change</button>
                }

                <font size="5">Email:</font>
                <font style="display: @((!ChangeKeys[4]) ? "" : "none")" size="5">@User.Email</font>
                <input style="display: @((ChangeKeys[4]) ? "" : "none")" bind="@User.Email" />
                @if (User.IsCurrentUser)
                {
                    <button onclick="@(() => ChangeProperty(4))">change</button>
                }
                else
                {
                    <div></div>
                }

                <font size="5">Registration date:</font>
                <font size="5">@User.Created.ToLongDateString()</font>
                <div></div>
            </div>
            <br />
            <button style="display: @((ButtonSaveChange) ? "" : "none")" class="pure-button pure-button-primary" onclick="@SaveChange">Save change</button>
        </div>
        <div class="grid-scroll">
            <h2>Posts</h2>
            <div class="scrollbox">
                <hr />
                <br />
                <ListViewTemplate Items="User.Posts.ToList()">
                    <ItemTemplate>
                        <PostMini deletePost="@((post) => DeletePost(post))" post="@context" />
                    </ItemTemplate>
                </ListViewTemplate>
            </div>
        </div>
        <div class="grid-scroll">
            <h2>Comments</h2>
            <div class="scrollbox">
                <hr />
                <br />
                <ListViewTemplate Items="User.Comments.ToList()">
                    <ItemTemplate>
                        <CommentMini comment="@context" />
                    </ItemTemplate>
                </ListViewTemplate>
            </div>
        </div>
    </div>
}

@functions{
    [Parameter] private string login { get; set; }
    private UserViewModel User { get; set; }
    private bool[] ChangeKeys = new bool[5];
    private bool ButtonSaveChange = false;
    private ElementRef files;

    protected async override Task OnParametersSetAsync()
    {
        User = await serviceOfAuthorize.GetJsonAsync<UserViewModel>($"/api/User/GetUserViewModel?login={login}");
    }
    private void ChangeProperty(int? key)
    {
        ButtonSaveChange = true;
        if(key.HasValue)
        {
            ChangeKeys[key.Value] = !ChangeKeys[key.Value];
        }
    }
    private async void SaveChange()
    {
        ButtonSaveChange = false;
        var userUpdate = new UserUpdateViewModel()
        {
            ApplicationUserId = User.ApplicationUserId,
            FirstName = User.FirstName,
            LastName = User.LastName,
            Email = User.Email,
            Login = User.Login,
            Password = User.Password
        };
        await serviceOfAuthorize.PostJsonAsync<object>("/api/User/Update", userUpdate);
    }
    private async void LoadImage()
    {
        User.Avatar = await serviceOfImage.LoadUserImage(files);
        this.ShouldRender();
    }
    private void DeletePost(PostMiniViewModel post)
    {
        User.Posts = User.Posts.Except(new[] { post }).ToList();
        StateHasChanged();
    }
}