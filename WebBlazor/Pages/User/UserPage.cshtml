@page "/UserPage/{Id:int}"
@using Domain.Contracts.Models.ViewModels.User
@using Domain.Contracts.Models.ViewModels.Post
@using Domain.Contracts.Models
@inject Components.ServiceOfAuthorize serviceOfAuthorize
@inject Components.ServiceOfImage serviceOfImage

@if (User == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div id="grid-user-profile" class="content-head content content-radius">
        <div>
            <div class="grid-cols-two">
                <p><a href="/UserPage/@(User.Login)"><h1>@User.FirstName @User.LastName</h1></a></p>
                <img src="@((User.Avatar == null) ? "/img/default-user-profile-image.png" : User.Avatar)" asp-append-version="true" height="100" width="100" />
            </div>
            @if (User.IsCurrentUser)
            {
                <br />
                <label for="file" class="pure-button">Change image</label>
                <input type="file" id="file" ref="files" onchange="@LoadImage" style="display: none;" />
                <br />
                <br />
            }
            <div id="grid-user-profile-userData">
                <font size="5">First name:</font>
                <font style="display: @((!ChangeKeys[0]) ? "" : "none")" size="5">@User.FirstName</font>
                <input style="display: @((ChangeKeys[0]) ? "" : "none")" bind="@User.FirstName" />
                @if (User.IsCurrentUser)
                {
                    <button onclick="@(() => ChangeProperty(0))">change</button>
                }
                else
                {
                    <div></div>
                }

                <font size="5">Last name:</font>
                <font style="display: @((!ChangeKeys[1]) ? "" : "none")" size="5">@User.LastName</font>
                <input style="display: @((ChangeKeys[1]) ? "" : "none")" bind="@User.LastName" />
                @if (User.IsCurrentUser)
                {
                    <button onclick="@(() => ChangeProperty(1))">change</button>
                }
                else
                {
                    <div></div>
                }

                <font size="5" color="@User.Role.Color">Role:</font>
                <font size="5" color="@User.Role.Color" style="display: @((!ChangeKeys[2]) ? "" : "none")">@User.Role.Name</font>
                <select style="display: @((ChangeKeys[2]) ? "" : "none")" bind="@SelectedRole">
                    @if (roles != null)
                    {
                        foreach (var item in roles)
                        {
                            <option style="color: @item.Color;" @((User.Role.Id == item.Id) ? "selected" : "")>@item.Name</option>
                        }
                    }
                </select>
                @if (User.IsCurrentUser && serviceOfAuthorize.DataAboutUser != null && serviceOfAuthorize.DataAboutUser.Priority == 3)
                {
                    <button onclick="@(() => ChangeProperty(2))">change</button>
                }
                else
                {
                    <div></div>
                }

                <font size="5">Count of likes:</font>
                <font size="5">@User.CountOfLikes</font>
                <div></div>

                <font size="5">Login:</font>
                <font style="display: @((!ChangeKeys[3]) ? "" : "none")" size="5">@User.Login</font>
                <input style="display: @((ChangeKeys[3]) ? "" : "none")" bind="@User.Login" />
                @if (User.IsCurrentUser)
                {
                    <button onclick="@(() => ChangeProperty(3))">change</button>
                }
                else
                {
                    <div></div>
                }


                @if (User.IsCurrentUser)
                {
                    <font size="5">New password:</font>
                    <input bind="@User.Password" />
                    <button onclick="@(() => ChangeProperty(null))">change</button>
                }

                <font size="5">Email:</font>
                <font style="display: @((!ChangeKeys[4]) ? "" : "none")" size="5">@User.Email</font>
                <input style="display: @((ChangeKeys[4]) ? "" : "none")" bind="@User.Email" />
                @if (User.IsCurrentUser)
                {
                    <button onclick="@(() => ChangeProperty(4))">change</button>
                }
                else
                {
                    <div></div>
                }

                <font size="5">Registration date:</font>
                <font size="5">@User.Created.ToLongDateString()</font>
                <div></div>
            </div>
            <br />
            <button style="display: @((ButtonSaveChange) ? "" : "none")" class="pure-button pure-button-primary" onclick="@SaveChange">Save change</button>
        </div>
        <div class="grid-scroll-user-posts">
            <h2>Posts</h2>
            <span>
                <font size="3">Sort by: </font>
                <a><font size="2" color="@(Param.Contains("Time")?"red":"")" onclick="@(() => { var mas = Param.Split(':').ToList(); if (mas[0] == "Time") { if (mas.Contains("r")) { mas.Remove("r"); } else { mas.Add("r"); } } else { mas[0] = "Time"; }; Param = string.Join(":", mas); } )">time</font></a>
                <a><font size="2" color="@(Param.Contains("Top")?"red":"")" onclick="@(() => { var mas = Param.Split(':').ToList(); if (mas[0] == "Top") { if (mas.Contains("r")) { mas.Remove("r"); } else { mas.Add("r"); } } else { mas[0] = "Top"; } Param = string.Join(":", mas); })">rating</font></a>

                <a><font size="2" color="@(Param.Contains(":r")?"red":"")" onclick="@(() => Param = (Param.Contains(":r")) ? Param.Replace(":r","") : $"{Param}:r")">Reverse</font></a>
            </span>
            <span>
                <font size="3">Filter by: </font>
                <a><font size="2" color="@(!Param.Contains(":f")?"red":"")" onclick="@(() => { var mas = Param.Split(':').ToList(); if (mas.Contains("f")) { mas.Remove("f"); if (mas.Contains("fin")) { mas.Remove("fin"); } else { mas.Remove("notfin"); } Param = string.Join(":", mas); } })">all</font></a>
                <a><font size="2" color="@(Param.Contains(":fin")?"red":"")" onclick="@(() => { var mas = Param.Split(':'); if (mas.Contains("f")) { mas[Array.IndexOf(mas, "f") + 1] = "fin"; Param = string.Join(":", mas); } else { Param = $"{Param}:f:fin"; } })">finished</font></a>
                <a><font size="2" color="@(Param.Contains(":notfin")?"red":"")" onclick="@(() => { var mas = Param.Split(':'); if (mas.Contains("f")) { mas[Array.IndexOf(mas, "f") + 1] = "notfin"; Param = string.Join(":", mas); } else { Param = $"{Param}:f:notfin"; } })">not finished</font></a>
            </span>
            <div class="scrollbox">
                <hr />
                <br />
                <ListOfPosts listOfPosts="@User.Posts.ToList()" PostType="@(User.Posts.GetType().GetGenericArguments().Single())" param="@Param"/>
            </div>
        </div>
        <div class="grid-scroll">
            <h2>Comments</h2>
            <div class="scrollbox">
                <hr />
                <br />
                <ListViewTemplate Items="User.Comments.ToList()">
                    <ItemTemplate>
                        <CommentMini comment="@context" />
                    </ItemTemplate>
                </ListViewTemplate>
            </div>
        </div>
    </div>
}

@functions{
    [Parameter] private int Id { get; set; }
    private UserViewModel User { get; set; }
    private bool[] ChangeKeys = new bool[5];
    private bool ButtonSaveChange = false;
    private ElementRef files;
    private List<UserRole> roles { get; set; }
    private string SelectedRole { get; set; }
    private string Param { get; set; }

    protected override void OnInit()
    {
        Param = $"Time:User-{Id}:f:fin";
    }
    protected async override Task OnParametersSetAsync()
    {
        User = await serviceOfAuthorize.GetJsonAsync<UserViewModel>($"/api/User/GetUserViewModel?userProfileId={Id}");
        if (serviceOfAuthorize.DataAboutUser != null && serviceOfAuthorize.DataAboutUser.Priority == 3)
        {
            roles = await serviceOfAuthorize.GetJsonAsync<List<UserRole>>("api/User/GetRoles");
            SelectedRole = roles.Select(a => a.Name).FirstOrDefault();
        }
    }
    private void ChangeProperty(int? key)
    {
        ButtonSaveChange = true;
        if (key.HasValue)
        {
            ChangeKeys[key.Value] = !ChangeKeys[key.Value];
        }
    }
    private async void SaveChange()
    {
        ButtonSaveChange = false;
        var userUpdate = new UserUpdateViewModel()
        {
            ApplicationUserId = User.ApplicationUserId,
            FirstName = User.FirstName,
            LastName = User.LastName,
            Email = User.Email,
            Login = User.Login,
            Password = User.Password,
            Role = roles.Where(a => a.Name == SelectedRole).FirstOrDefault()
        };
        await serviceOfAuthorize.PostJsonAsync<object>("/api/User/Update", userUpdate);
        User.Role = roles.Where(a => a.Name == SelectedRole).FirstOrDefault();
        for (int i = 0; i < ChangeKeys.Length; i++) ChangeKeys[i] = false;
        this.StateHasChanged();
    }
    private async void LoadImage()
    {
        User.Avatar = await serviceOfImage.LoadUserImage(files);
        this.ShouldRender();
    }
    private void DeletePost(PostMiniViewModel post)
    {
        User.Posts = User.Posts.Except(new[] { post }).ToList();
        StateHasChanged();
    }
}