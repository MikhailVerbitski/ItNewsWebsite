@using System.ComponentModel
@using Microsoft.AspNetCore.Blazor.Components
@inject Services.ServiceOfLocalization serviceOfLocalization

@if (Errors.Any())
{
  <div class="validationerror">
    <ul>
      @foreach (var error in Errors)
      {
        <li>@((language != null) ? language[error] : "")</li>
      }
    </ul>
  </div>
}

@functions {
    [Parameter] protected object Subject { get; set; }
    [Parameter] protected string Property { get; set; }

    private Dictionary<string, string> language;

    protected async override Task OnInitAsync()
    {
        language = await serviceOfLocalization.LanguageDictionary;
    }
    public IEnumerable<string> Errors
    {
        get
        {
            switch (Subject)
            {
                case null:
                    yield return $"{nameof(Subject)} has not been set!";
                    yield break;
                case INotifyDataErrorInfo ine:
                    if( Property == null )
                    {
                        yield return $"{nameof(Property)} has not been set!";
                        yield break;
                    }
                    foreach (var err in ine.GetErrors(Property))
                    {
                        yield return (string)err;
                    }
                    break;
                case IDataErrorInfo ide:
                    if( Property == null )
                    {
                        yield return $"{nameof(Property)} has not been set!";
                        yield break;
                    }
                    string error = ide[Property];
                    if (error != null)
                    {
                        yield return error;
                    }
                    else
                    {
                        yield break;
                    }
                    break;
            }
        }
    }
}