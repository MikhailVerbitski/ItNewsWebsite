@inject Components.ServiceOfAuthorize serviceOfAuthorize
@using Domain.Contracts.Models.ViewModels.Post
@using Domain.Contracts.Models

@if (listOfPosts == null)
{
    <p><em>Loading...</em></p>
}
else if (count == 0)
{
    <p><em><LocalizationSentence Sentence="@("Posts yet :(")" /></em></p>
}
else
{
    @switch (PostType.Name)
    {
        case nameof(PostCompactViewModel):
            <ListViewTemplate Items="@(listOfPosts as List<PostCompactViewModel>)">
                <ItemTemplate>
                    <PostCompact deletePost="@((post) => DeletePost(post))" post="@(context as PostCompactViewModel)" />
                </ItemTemplate>
            </ListViewTemplate>
            break;
        case nameof(PostMiniViewModel):
            <ListViewTemplate Items="@(listOfPosts as List<PostMiniViewModel>)">
                <ItemTemplate>
                    <PostMini deletePost="@((post) => DeletePost(post))" post="@(context as PostMiniViewModel)" />
                </ItemTemplate>
            </ListViewTemplate>
            break;
    }
}

@functions {
    [Parameter] private Type PostType { get; set; }
    [Parameter] private string param { get; set; }
    [Parameter] private object listOfPosts { get; set; }
    private int count = 0;
    private bool notFirstTime = false;
    private KeyValuePair<string, Func<string[], PostReadRequestParams>>[] config;

    protected override void OnInit()
    {
        config = new[] {
            new KeyValuePair<string,Func<string[],PostReadRequestParams>>("Top", a => new PostReadRequestParams()
            {
                type =PostType.Name,
                count = null,
                orderBy = $"{(a != null && a.Contains("r") ? "" : "-")}((CountOfScore == 0) ? 0 : (SumOfScore / CountOfScore))",
                where = (a != null) ?
                $"{(a.Contains("f") ? $"IsFinished=={a.Contains("fin")} " : "")}" +
                $"{((a.Contains("f") && (a.Any(b => b.Contains("User")) || (a.Any(b => b.Contains("ByTag"))))) ? "and" : "")}" +
                $" {(a.Any(b => b.Contains("User")) ? $"UserProfileId == {a.Where(b => b.Contains("User")).FirstOrDefault().Split('-')[1]}" : "")} " +
                $"{(((a.Any(b => b.Contains("User")) || a.Contains("f")) && a.Any(b => b.Contains("ByTag"))) ? "and" : "")}" +
                $"{(a.Any(b => b.Contains("ByTag")) ? $" Tags.Any(TagId=={a.Where(b => b.Contains("ByTag")).FirstOrDefault().Split('-')[1]})" : "")}" : null
            }),
            new KeyValuePair<string,Func<string[],PostReadRequestParams>>("Time", a => new PostReadRequestParams()
            {
                type = PostType.Name,
                count = null,
                orderBy = $"{(a != null && a.Contains("r") ? "-" : "")}Created.Millisecond",
                where = (a != null) ?
                $"{(a.Contains("f") ? $"IsFinished=={a.Contains("fin")} " : "")}" +
                $"{((a.Contains("f") && (a.Any(b => b.Contains("User")) || (a.Any(b => b.Contains("ByTag"))))) ? "and" : "")}" +
                $" {(a.Any(b => b.Contains("User")) ? $"UserProfileId == {a.Where(b => b.Contains("User")).FirstOrDefault().Split('-')[1]}" : "")} " +
                $"{(((a.Any(b => b.Contains("User")) || a.Contains("f")) && a.Any(b => b.Contains("ByTag"))) ? "and" : "")}" +
                $"{(a.Any(b => b.Contains("ByTag")) ? $" Tags.Any(TagId=={a.Where(b => b.Contains("ByTag")).FirstOrDefault().Split('-')[1]})" : "")}" : null
            })
        };
    }
    protected override async Task OnParametersSetAsync()
    {
        if ((listOfPosts == null || notFirstTime) && param != null && param != string.Empty)
        {
            var parameters = param.Split(':');
            var requestParams = config.Where(a => a.Key == parameters[0]).FirstOrDefault().Value.Invoke((parameters.Length > 1) ? parameters.Skip(1).ToArray() : null);
            switch (PostType.Name)
            {
                case nameof(PostCompactViewModel):
                    listOfPosts = await serviceOfAuthorize.PostJsonAsync<List<PostCompactViewModel>>("/api/Post/Read", requestParams);
                    break;
                case nameof(PostMiniViewModel):
                    listOfPosts = await serviceOfAuthorize.PostJsonAsync<List<PostMiniViewModel>>("/api/Post/Read", requestParams);
                    break;
            }
        }
        switch (PostType.Name)
        {
            case nameof(PostCompactViewModel):
                count = (listOfPosts as List<PostCompactViewModel>).Count;
                break;
            case nameof(PostMiniViewModel):
                count = (listOfPosts as List<PostMiniViewModel>).Count;
                break;
        }
        this.StateHasChanged();
        notFirstTime = true;
    }
    private void DeletePost(BasePostViewModel post)
    {
        switch (PostType.Name)
        {
            case nameof(PostCompactViewModel):
                listOfPosts = (listOfPosts as List<PostCompactViewModel>).Except(new[] { post as PostCompactViewModel }).ToList();
                break;
            case nameof(PostMiniViewModel):
                listOfPosts = (listOfPosts as List<PostMiniViewModel>).Except(new[] { post as PostMiniViewModel }).ToList();
                count = (listOfPosts as List<PostMiniViewModel>).Count;
                break;
        }
        StateHasChanged();
    }
}