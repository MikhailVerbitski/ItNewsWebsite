@using Domain.Contracts.Models.ViewModels.User
@inject Services.ServiceOfAuthorize serviceOfAuthorize
@inject Services.ServiceOfImage serviceOfImage
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper

<div class="grid-cols-two">
    <p><a href="/UserPage/@(User.UserProfileId)"><h1>@User.FirstName @User.LastName</h1></a></p>
    <img src="@((User.Avatar == null) ? "/img/default-user-profile-image.png" : User.Avatar)" asp-append-version="true" height="100" width="100" />
</div>
@if (User.IsCurrentUser)
{
    <br />
    <label for="file" class="pure-button user-page-button"><LocalizationSentence Sentence="@("Change image")" /></label>
    <input type="file" id="file" ref="files" onchange="@LoadImage" style="display: none;" />

    <br />
    @if (serviceOfAuthorize.DataAboutUser != null && serviceOfAuthorize.DataAboutUser.Priority == 3)
    {
        <button class="pure-button" onclick="@(() => ChangeProperty(5, ((User.UserClaims.Any(a => a.ClaimType == "blocked")) ? User.UserClaims.FirstOrDefault(a => a.ClaimType == "blocked") :  User.AllClaims[User.AllClaims.FindIndex(a => a.ClaimType == "blocked")])))" class="pure-button user-page-button">
            <LocalizationSentence Sentence="@(User.UserClaims.Any(a => a.ClaimType == "blocked") ? "unlock" : "lock")" />
        </button>
        <textarea style="display: @((!ChangeKeys[5]) ? "" : "none")" bind="@blockedValue" />
    }
    <br />
}
@if (User.UserClaims.Any(a => a.ClaimType == "blocked"))
{
    <h2 style="color: red;"><LocalizationSentence Sentence="@("blocked")" /></h2>
    <h3 style="color: red;"><LocalizationSentence Sentence="@("reason")" />: @blockedValue</h3>
    <br />
}
<div id="grid-user-profile-userData">
    <font size="5"><LocalizationSentence Sentence="@("First Name")" />:</font>
    <font style="display: @((!ChangeKeys[0]) ? "" : "none")" size="5">@User.FirstName</font>
    <input style="display: @((ChangeKeys[0]) ? "" : "none")" bind="@User.FirstName" />
    @if (User.IsCurrentUser)
    {
        <button class="pure-button" onclick="@(() => ChangeProperty(0))">change</button>
    }
    else
    {
        <div></div>
    }

    <font size="5"><LocalizationSentence Sentence="@("Last Name")" />:</font>
    <font style="display: @((!ChangeKeys[1]) ? "" : "none")" size="5">@User.LastName</font>
    <input style="display: @((ChangeKeys[1]) ? "" : "none")" bind="@User.LastName" />
    @if (User.IsCurrentUser)
    {
        <button class="pure-button" onclick="@(() => ChangeProperty(1))">change</button>
    }
    else
    {
        <div></div>
    }

    <font size="5" color="@User.Role.Color"><LocalizationSentence Sentence="@("Role")" />:</font>
    <font size="5" color="@User.Role.Color" style="display: @((!ChangeKeys[2]) ? "" : "none")">@User.Role.Name</font>
    @if (User.IsCurrentUser && serviceOfAuthorize.DataAboutUser != null && serviceOfAuthorize.DataAboutUser.Priority == 3)
    {
        <select style="display: @((ChangeKeys[2]) ? "" : "none")" onchange="@((UIChangeEventArgs e) => { User.Role = User.AllRoles.Where(a => a.Name == e.Value.ToString()).FirstOrDefault(); })">
            @foreach (var item in User.AllRoles)
            {
                <option style="color: @item.Color;">@item.Name</option>
            }
        </select>
        <button class="pure-button" onclick="@(() => ChangeProperty(2))">change</button>
    }
    else
    {
        <div></div>
    }

    <font size="5"><LocalizationSentence Sentence="@("Count of likes")" />:</font>
    <font size="5">@User.CountOfLikes</font>
    <div></div>

    <font size="5"><LocalizationSentence Sentence="@("Login")" />:</font>
    <font style="display: @((!ChangeKeys[3]) ? "" : "none")" size="5">@User.Login</font>
    <input style="display: @((ChangeKeys[3]) ? "" : "none")" bind="@User.Login" />
    @if (User.IsCurrentUser)
    {
        <button class="pure-button" onclick="@(() => ChangeProperty(3))">change</button>
    }
    else
    {
        <div></div>
    }

    @if (User.IsCurrentUser)
    {
        <font size="5"><LocalizationSentence Sentence="@("New password")" />:</font>
        <font style="display: @((!ChangeKeys[6]) ? "" : "none")" size="5"></font>
        <input style="display: @((ChangeKeys[6]) ? "" : "none")" bind="@User.Password" />
        <button class="pure-button" onclick="@(() => ChangeProperty(6))">change</button>
    }

    <font size="5"><LocalizationSentence Sentence="@("Email")" />:</font>
    <font style="display: @((!ChangeKeys[4]) ? "" : "none")" size="5">@User.Email</font>
    <input style="display: @((ChangeKeys[4]) ? "" : "none")" bind="@User.Email" />
    @if (User.IsCurrentUser)
    {
        <button class="pure-button" onclick="@(() => ChangeProperty(4))">change</button>
    }
    else
    {
        <div></div>
    }

    <font size="5"><LocalizationSentence Sentence="@("Registration date")" />:</font>
    <font size="5"><LocalizationTime Time="@User.Created"/></font>
    <div></div>
</div>
<br />
@if (serviceOfAuthorize.DataAboutUser != null && (serviceOfAuthorize.DataAboutUser.UserProfileId == User.UserProfileId || serviceOfAuthorize.DataAboutUser.Priority >= 3))
{
    <button class="pure-button" onclick="@(async () =>
            {
                await serviceOfRequest.GetAsync($"/api/User/Delete?id={User.UserProfileId}");
                if(serviceOfAuthorize.DataAboutUser.UserProfileId == User.UserProfileId)
                {
                    await serviceOfAuthorize.Logout();
                    UriHelper.NavigateTo("/Login");
                }
            })">
        <LocalizationSentence Sentence="@("Delete account")" />
    </button>
}
<br />
<button style="display: @((paramChange) ? "" : "none")" class="pure-button pure-button-primary" onclick="@SaveChange">Save change</button>

@functions{
    [Parameter] private UserViewModel User { get; set; }

    private bool[] ChangeKeys = new bool[7];
    private ElementRef files;
    private string blockedValue;
    private bool paramChange = false;

    protected override void OnParametersSet()
    {
        blockedValue = (User.UserClaims.Any(a => a.ClaimType == "blocked"))
            ? User.UserClaims.FirstOrDefault(a => a.ClaimType == "blocked")?.ClaimValue
            : (User.AllClaims != null && User.AllClaims.Any(a => a.ClaimType == "blocked"))
                ? User.AllClaims.FirstOrDefault(a => a.ClaimType == "blocked").ClaimValue
                : null;
        blockedValue = (blockedValue == null) ? "" : blockedValue;
        ChangeKeys[5] = User.UserClaims.Any(a => a.ClaimType == "blocked");
    }
    private void ChangeProperty(int? key, object obj = null)
    {
        paramChange = true;
        if (key.HasValue)
        {
            ChangeKeys[key.Value] = !ChangeKeys[key.Value];
            if (key == 5 && obj != null)
            {
                if (User.UserClaims.Contains(obj as Domain.Contracts.Models.ViewModels.UserClaim))
                {
                    User.AllClaims[User.AllClaims.FindIndex(a => a.ClaimType == "blocked")] = obj as Domain.Contracts.Models.ViewModels.UserClaim;
                    User.UserClaims.Remove(obj as Domain.Contracts.Models.ViewModels.UserClaim);
                }
                else
                {
                    User.UserClaims.Add(obj as Domain.Contracts.Models.ViewModels.UserClaim);
                }
            }
        }
    }
    private async void SaveChange()
    {
        paramChange = false;
        for (int i = 0; i < ChangeKeys.Length; i++) ChangeKeys[i] = false;
        await serviceOfRequest.PostJsonAsync<object>("/api/User/Update", User);
        await serviceOfAuthorize.UpdateUserData();
        this.StateHasChanged();
    }
    private async void LoadImage()
    {
        User.Avatar = await serviceOfImage.LoadUserImage(files);
        this.ShouldRender();
    }
}