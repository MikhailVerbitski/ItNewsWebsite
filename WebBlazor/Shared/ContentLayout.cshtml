@inherits BlazorLayoutComponent
@using WebBlazor.Models
@using WebBlazor.Models.ViewModels.Tag
@using WebBlazor.Models.ViewModels.Post
@layout MainLayout
@inject Components.ServiceOfAuthorize serviceOfAuthorize
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper

<div class="grid-content">
    <div class="content">
        <div class="side-bar">
            @if (serviceOfAuthorize.DataAboutUser != null && serviceOfAuthorize.DataAboutUser.Priority > 1)
            {
                <div class="content-body content-radius-top">
                    <a href="/CreatePost" class="pure-button create-post-link content-radius-top"><font size="4">Create new post</font></a>
                </div>
            }
            <div class="content-body @((serviceOfAuthorize.DataAboutUser != null && serviceOfAuthorize.DataAboutUser.Priority > 1) ? "" : "content-radius-top")">
                <div id="keywords"></div>
            </div>
            <div class="content-body content-radius-bott" style="padding: 20px;">
                <a href="/Top"><h1 style="text-align:center;">Top posts</h1></a>
                <br />
                @if (TheFirstFiveWithTheHighestRating != null)
                {
                    for (int i = 0; i < TheFirstFiveWithTheHighestRating.Count; i++)
                    {
                        var item = TheFirstFiveWithTheHighestRating[i];
                        <div style="padding-right: 20px;">
                            <div class="grid-pots-ration-mini">
                                <a href="/Post/@item.PostId"><font size="@(5-i)">@item.Header</font></a>
                                <span><StarsRating PercentOfRating="@(item.Score * 20)" PostId="@(item.PostId)" /></span>
                            </div>
                        </div>
                        <hr />
                    }
                }
            </div>
        </div>
    </div>
    <div class="content-body content content-radius" id="posts">
        @Body
    </div>
</div>

@functions{
    private List<PostMiniViewModel> TheFirstFiveWithTheHighestRating;
    private List<TagForCloud> tagsForCloud;

    protected async override Task OnInitAsync()
    {
        TheFirstFiveWithTheHighestRating = await serviceOfAuthorize.GetJsonAsync<List<PostMiniViewModel>>("api/Post/TheFirstSeveralWithTheHighestRating?take=5");
        var tags = await serviceOfAuthorize.GetJsonAsync<List<TagViewModel>>("api/Post/GetListOfTags");
        tagsForCloud = tags.Select(a => new TagForCloud()
        {
            text = a.Name,
            weight = a.CountOfUsage,
            link = $"/PostsByTag/{a.Id}"
        })
        .ToList();
    }
    protected async override Task OnAfterRenderAsync()
    {
        if(tagsForCloud != null)
        {
            var words = Microsoft.JSInterop.Json.Serialize(tagsForCloud);
            await WebBlazor.JsInteropClasses.TagCloud.StartTagCanvas(words);
        }
    }
}